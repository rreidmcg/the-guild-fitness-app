<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Workout Swipe Deck</title>
  <style>
    body {
      margin: 0;
      background: #2c3e50;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      font-family: sans-serif;
    }

    .deck {
      position: relative;
      width: 320px;
      height: 460px;
      perspective: 1000px;
    }

    .card {
      position: absolute;
      width: 100%;
      height: 100%;
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2em;
      user-select: none;
      transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }

    .card.next {
      z-index: 1;
      transform: scale(0.96);
      opacity: 0.8;
    }

    .card.current {
      z-index: 2;
    }
  </style>
</head>
<body>

<div class="deck" id="deck"></div>

<script>
  const exercises = ['Push-ups', 'Squats', 'Plank', 'Lunges', 'Burpees'];
  let currentIndex = 0;

  const deck = document.getElementById('deck');

  let topCard = null;
  let nextCard = null;

  function renderDeck() {
    deck.innerHTML = '';

    topCard = createCard(exercises[currentIndex], 'current');
    deck.appendChild(topCard);

    if (exercises[currentIndex + 1]) {
      nextCard = createCard(exercises[currentIndex + 1], 'next');
      deck.appendChild(nextCard);
    }
  }

  function createCard(text, role) {
    const card = document.createElement('div');
    card.className = `card ${role}`;
    card.textContent = text;
    return card;
  }

  let startX = 0, isDragging = false;

  deck.addEventListener('touchstart', dragStart, { passive: false });
  deck.addEventListener('touchmove', onDrag, { passive: false });
  deck.addEventListener('touchend', endDrag);
  deck.addEventListener('mousedown', dragStart);
  document.addEventListener('mousemove', onDrag);
  document.addEventListener('mouseup', endDrag);

  function dragStart(e) {
    if (!topCard) return;
    isDragging = true;
    startX = (e.touches ? e.touches[0] : e).clientX;
    topCard.style.transition = 'none';
  }

  function onDrag(e) {
    if (!isDragging || !topCard) return;
    const x = (e.touches ? e.touches[0] : e).clientX;
    const dx = x - startX;
    topCard.style.transform = `translateX(${dx}px)`;
  }

  function endDrag(e) {
    if (!isDragging || !topCard) return;
    isDragging = false;
    const x = (e.changedTouches ? e.changedTouches[0] : e).clientX;
    const dx = x - startX;
    const threshold = 100;

    topCard.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';

    if (dx < -threshold && currentIndex < exercises.length - 1) {
      topCard.style.transform = 'translateX(-1000px)';
      topCard.style.opacity = '0';
      currentIndex++;
      setTimeout(renderDeck, 300);
    } else if (dx > threshold && currentIndex > 0) {
      // Swipe right to go back
      currentIndex--;
      topCard.remove();

      topCard = createCard(exercises[currentIndex], 'current');
      topCard.style.transform = 'translateX(-1000px)';
      deck.appendChild(topCard);

      requestAnimationFrame(() => {
        topCard.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';
        topCard.style.transform = 'translateX(0)';
        topCard.style.opacity = '1';
        renderDeck();
      });
    } else {
      topCard.style.transform = 'translateX(0)';
    }
  }

  renderDeck();
</script>

</body>
</html>