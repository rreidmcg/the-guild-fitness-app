<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tinder-Style Swipe (No Tilt)</title>
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #ececec;
      font-family: sans-serif;
      overflow: hidden;
    }
    .card-container {
      position: relative;
      width: 320px;
      height: 460px;
    }
    .card {
      position: absolute;
      width: 100%;
      height: 100%;
      background: white;
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2em;
      user-select: none;
      transition: transform 0.3s ease-out, opacity 0.3s ease-out;
      box-shadow: 0 15px 50px rgba(0, 0, 0, 0.25);
    }
  </style>
</head>
<body>

<div class="card-container" id="cardContainer">
  <div class="card" style="background:#ff595e;">Card 1</div>
  <div class="card" style="background:#1982c4;">Card 2</div>
  <div class="card" style="background:#8ac926;">Card 3</div>
</div>

<script>
  const container = document.getElementById('cardContainer');

  let startX, currentCard, isDragging = false;

  function attachSwipe(card) {
    card.addEventListener('mousedown', dragStart);
    card.addEventListener('touchstart', dragStart);

    document.addEventListener('mousemove', dragMove);
    document.addEventListener('touchmove', dragMove);

    document.addEventListener('mouseup', dragEnd);
    document.addEventListener('touchend', dragEnd);
  }

  function dragStart(e) {
    if (!container.lastElementChild) return;
    currentCard = container.lastElementChild;
    startX = (e.touches ? e.touches[0] : e).clientX;
    isDragging = true;
    currentCard.style.transition = 'none';
  }

  function dragMove(e) {
    if (!isDragging || !currentCard) return;

    const x = (e.touches ? e.touches[0] : e).clientX;
    const deltaX = x - startX;

    currentCard.style.transform = `translateX(${deltaX}px)`;
  }

  function dragEnd(e) {
    if (!isDragging || !currentCard) return;

    const x = (e.changedTouches ? e.changedTouches[0] : e).clientX;
    const deltaX = x - startX;

    const threshold = 120;

    currentCard.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';

    if (Math.abs(deltaX) > threshold) {
      const direction = deltaX > 0 ? 1 : -1;
      currentCard.style.transform = `translateX(${direction * 1000}px)`;
      currentCard.style.opacity = '0';

      setTimeout(() => {
        currentCard.remove();
        currentCard = null;
      }, 300);
    } else {
      currentCard.style.transform = 'translateX(0)';
    }

    isDragging = false;
  }

  Array.from(container.children).forEach(card => attachSwipe(card));
</script>

</body>
</html>